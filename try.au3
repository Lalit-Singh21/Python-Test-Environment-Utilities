#Region ;**** Directives created by AutoIt3Wrapper_GUI ****
#AutoIt3Wrapper_Res_requestedExecutionLevel=asInvoker
#EndRegion ;**** Directives created by AutoIt3Wrapper_GUI ****
; Generated by AutoIt Scriptomatic

$wbemFlagReturnImmediately = 0x10
$wbemFlagForwardOnly = 0x20
$colItems = ""
$sIP = "mswin7tst002"
$WinOS=""

;_WaitForIP($strComputer)

Func _WaitForIP($sIP)
 $Count=0
 Do
   $Ping = Ping($sIP,1)
   Sleep(1000) ; Give the CPU a break
   $Count=$Count+1
   If $Ping Then
      $WinOS = RegRead("\\"&$sIP&"\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion", "ProductName")
      if StringRegExp($WinOS,"XP") Then
	     $WinOS="XP"
      ElseIf StringRegExp($WinOS,"7") Then
	     $WinOS="WIN7"
	  EndIf
   EndIf
 Until $WinOS == "XP" OR $WinOS =="WIN7" OR $Count=120
 MsgBox(4096, "OS is", $WinOS)
EndFunc


;~ #include <GUIConstantsEx.au3>
;~ $seconds=10
;~ for $i=$seconds to 0 Step -1
;~ 	GUICreate("Unlock Windows", 580, 60)
;~ 	GUICtrlCreateLabel("An error occured connecting to " & $sIP & ". Check network connectivity and firewall ...will now quit in " &$i &" seconds", 10, 10)
;~     GUICtrlCreateButton("OK", 250, 30, 60)
;~     GUISetState(@SW_SHOW)
;~ 	$i=$i-1
;~ 	Sleep (1000)
;~ Next
;~ 	$seconds=5
;~ 	for $i=$seconds to 0 Step -1
;~ 		GUICreate("Login/Unlock Window", 350, 60)
;~ 			GUICtrlCreateLabel("Machine " & $sIP & " is found alive. Will now login in " &$i &" seconds", 10, 10)
;~ 			GUICtrlCreateButton("OK", 150, 30, 60)
;~ 			GUISetState(@SW_SHOW)
;~ 		$i=$i-1
;~ 		Sleep (1000)
;~ 	Next

Func _WinWaitActivate($title,$text,$timeout=0)
	WinWait($title,$text,$timeout)
	If Not WinActive($title,$text) Then WinActivate($title,$text)
	WinWaitActive($title,$text,$timeout)
	If WinActivate($title,$text) then return True
EndFunc

;~ 	$popup=True
;~ 	$errorWinText="TightVNC info,TightVNC error,TightVNC authentication info"
;~ 	$arrpopup= StringSplit($errorWinText, ",")
;~ 	$iMax=UBound($arrpopup)
;~ 	MsgBox(4096, "array size", $iMax)
;~ 	for $i=1 to $iMax Step +1
;~ 		MsgBox(4096, "pop up",$arrpopup[$i])
;~ 		While $popup=True
;~ 			If WinExists($arrpopup[$i], "") Then
;~ 				WinClose($arrpopup[$i], "")
;~ 				MsgBox(4096, "pop up exists",$arrpopup[$i])
;~ 			Else
;~ 				$popup=False
;~ 			EndIf
;~ 		WEnd
;~ 	Next

	Run ("\\ukrobot\testing\_Applications\VNC\vncviewer.exe")
	Sleep (1000)
	If _WinWaitActivate("New TightVNC Connection","") Then
		Send ("mswin7tst005")
		Send("{ENTER}")
	EndIf
	Sleep (2000)
	If _WinWaitActivate("Standard VNC Authentication","") Then
		Send("robot")
		Send("{ENTER}")
	EndIf
	If _WinWaitActivate("mswin7tst005","") Then
		Sleep(2000)
		Send ("{ENTER}")
		Sleep(1000)
		Send ("{ESC}")
		Sleep(1000)
		;If _WinWaitActivate("mswin7tst005","Press CTRL") Then
		Send ("{SHIFTDOWN}{CTRLDOWN}{ALTDOWN}{DELETE}" & "{SHIFTUP}{CTRLUP}{ALTUP}")
		Sleep(2000)
		;EndIf
	EndIf



;Local $var = RegRead("\\"&$strComputer&"\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion", "ProductName")
;MsgBox(4096, "OS is:", $var)



;~ $Output=""
;~ $Output = $Output & "Computer: " & $strComputer
;~ $Output = $Output & "=========================================="
;~ $objWMIService = ObjGet("winmgmts:\\" & $strComputer & "\root\CIMV2")
;~ $colItems = $objWMIService.ExecQuery("SELECT * FROM Win32_OperatingSystem", "WQL", _
;~                                           $wbemFlagReturnImmediately + $wbemFlagForwardOnly)

;~ If IsObj($colItems) then
;~    For $objItem In $colItems
;~       $Output = $Output & "BootDevice: " & $objItem.BootDevice & @CRLF
;~       $Output = $Output & "BuildNumber: " & $objItem.BuildNumber & @CRLF
;~       $Output = $Output & "BuildType: " & $objItem.BuildType & @CRLF
;~       $Output = $Output & "Caption: " & $objItem.Caption & @CRLF
;~       $Output = $Output & "CodeSet: " & $objItem.CodeSet & @CRLF
;~       $Output = $Output & "CountryCode: " & $objItem.CountryCode & @CRLF
;~       $Output = $Output & "CreationClassName: " & $objItem.CreationClassName & @CRLF
;~       $Output = $Output & "CSCreationClassName: " & $objItem.CSCreationClassName & @CRLF
;~       $Output = $Output & "CSDVersion: " & $objItem.CSDVersion & @CRLF
;~       $Output = $Output & "CSName: " & $objItem.CSName & @CRLF
;~       $Output = $Output & "CurrentTimeZone: " & $objItem.CurrentTimeZone & @CRLF
;~       $Output = $Output & "DataExecutionPrevention_32BitApplications: " & $objItem.DataExecutionPrevention_32BitApplications & @CRLF
;~       $Output = $Output & "DataExecutionPrevention_Available: " & $objItem.DataExecutionPrevention_Available & @CRLF
;~       $Output = $Output & "DataExecutionPrevention_Drivers: " & $objItem.DataExecutionPrevention_Drivers & @CRLF
;~       $Output = $Output & "DataExecutionPrevention_SupportPolicy: " & $objItem.DataExecutionPrevention_SupportPolicy & @CRLF
;~       $Output = $Output & "Debug: " & $objItem.Debug & @CRLF
;~       $Output = $Output & "Description: " & $objItem.Description & @CRLF
;~       $Output = $Output & "Distributed: " & $objItem.Distributed & @CRLF
;~       $Output = $Output & "EncryptionLevel: " & $objItem.EncryptionLevel & @CRLF
;~       $Output = $Output & "ForegroundApplicationBoost: " & $objItem.ForegroundApplicationBoost & @CRLF
;~       $Output = $Output & "FreePhysicalMemory: " & $objItem.FreePhysicalMemory & @CRLF
;~       $Output = $Output & "FreeSpaceInPagingFiles: " & $objItem.FreeSpaceInPagingFiles & @CRLF
;~       $Output = $Output & "FreeVirtualMemory: " & $objItem.FreeVirtualMemory & @CRLF
;~       $Output = $Output & "InstallDate: " & WMIDateStringToDate($objItem.InstallDate) & @CRLF
;~       $Output = $Output & "LargeSystemCache: " & $objItem.LargeSystemCache & @CRLF
;~       $Output = $Output & "LastBootUpTime: " & WMIDateStringToDate($objItem.LastBootUpTime) & @CRLF
;~       $Output = $Output & "LocalDateTime: " & WMIDateStringToDate($objItem.LocalDateTime) & @CRLF
;~       $Output = $Output & "Locale: " & $objItem.Locale & @CRLF
;~       $Output = $Output & "Manufacturer: " & $objItem.Manufacturer & @CRLF
;~       $Output = $Output & "MaxNumberOfProcesses: " & $objItem.MaxNumberOfProcesses & @CRLF
;~       $Output = $Output & "MaxProcessMemorySize: " & $objItem.MaxProcessMemorySize & @CRLF
;~       $Output = $Output & "Name: " & $objItem.Name & @CRLF
;~       $Output = $Output & "NumberOfLicensedUsers: " & $objItem.NumberOfLicensedUsers & @CRLF
;~       $Output = $Output & "NumberOfProcesses: " & $objItem.NumberOfProcesses & @CRLF
;~       $Output = $Output & "NumberOfUsers: " & $objItem.NumberOfUsers & @CRLF
;~       $Output = $Output & "Organization: " & $objItem.Organization & @CRLF
;~       $Output = $Output & "OSLanguage: " & $objItem.OSLanguage & @CRLF
;~       $Output = $Output & "OSProductSuite: " & $objItem.OSProductSuite & @CRLF
;~       $Output = $Output & "OSType: " & $objItem.OSType & @CRLF
;~       $Output = $Output & "OtherTypeDescription: " & $objItem.OtherTypeDescription & @CRLF
;~       $Output = $Output & "PlusProductID: " & $objItem.PlusProductID & @CRLF
;~       $Output = $Output & "PlusVersionNumber: " & $objItem.PlusVersionNumber & @CRLF
;~       $Output = $Output & "Primary: " & $objItem.Primary & @CRLF
;~       $Output = $Output & "ProductType: " & $objItem.ProductType & @CRLF
;~       $Output = $Output & "QuantumLength: " & $objItem.QuantumLength & @CRLF
;~       $Output = $Output & "QuantumType: " & $objItem.QuantumType & @CRLF
;~       $Output = $Output & "RegisteredUser: " & $objItem.RegisteredUser & @CRLF
;~       $Output = $Output & "SerialNumber: " & $objItem.SerialNumber & @CRLF
;~       $Output = $Output & "ServicePackMajorVersion: " & $objItem.ServicePackMajorVersion & @CRLF
;~       $Output = $Output & "ServicePackMinorVersion: " & $objItem.ServicePackMinorVersion & @CRLF
;~       $Output = $Output & "SizeStoredInPagingFiles: " & $objItem.SizeStoredInPagingFiles & @CRLF
;~       $Output = $Output & "Status: " & $objItem.Status & @CRLF
;~       $Output = $Output & "SuiteMask: " & $objItem.SuiteMask & @CRLF
;~       $Output = $Output & "SystemDevice: " & $objItem.SystemDevice & @CRLF
;~       $Output = $Output & "SystemDirectory: " & $objItem.SystemDirectory & @CRLF
;~       $Output = $Output & "SystemDrive: " & $objItem.SystemDrive & @CRLF
;~       $Output = $Output & "TotalSwapSpaceSize: " & $objItem.TotalSwapSpaceSize & @CRLF
;~       $Output = $Output & "TotalVirtualMemorySize: " & $objItem.TotalVirtualMemorySize & @CRLF
;~       $Output = $Output & "TotalVisibleMemorySize: " & $objItem.TotalVisibleMemorySize & @CRLF
;~       $Output = $Output & "Version: " & $objItem.Version & @CRLF
;~       $Output = $Output & "WindowsDirectory: " & $objItem.WindowsDirectory & @CRLF
;~       if Msgbox(1,"WMI Output",$Output) = 2 then ExitLoop
;~       $Output=""
;~   Next
;~ Else
;~    Msgbox(0,"WMI Output","No WMI Objects Found for class: " & "Win32_OperatingSystem" )
;~ Endif


;~ Func WMIDateStringToDate($dtmDate)

;~     Return (StringMid($dtmDate, 5, 2) & "/" & _
;~     StringMid($dtmDate, 7, 2) & "/" & StringLeft($dtmDate, 4) _
;~     & " " & StringMid($dtmDate, 9, 2) & ":" & StringMid($dtmDate, 11, 2) & ":" & StringMid($dtmDate,13, 2))
;~ EndFunc
